name: Run PyAutoGUI Bot + Docker Parallel

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  schedule:
    - cron: '14,29,44,59 * * * *'

jobs:
  run-pyautogui:
    name: Run PyAutoGUI (Windows) - Job ${{ matrix.job_id }}
    runs-on: windows-latest
    timeout-minutes: 20
    strategy:
      matrix:
        job_id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
      fail-fast: false

    steps:
      - name: ‚¨áÔ∏è Checkout Repo
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: üì¶ Install dependencies
        run: |
          pip install -r requirements.txt

      - name: ‚ñ∂Ô∏è Run bot script (PyAutoGUI)
        run: python main.py
      - name: ‚ñ∂Ô∏è Run bot script (PyAutoGUI)
        run: python main.py

  run-docker:
    name: Run Docker Containers (Ubuntu) - Job ${{ matrix.job_id }}
    runs-on: ubuntu-latest
    needs: run-pyautogui  # Ch·ªâ ch·∫°y sau khi Windows job ch·∫°y xong
    timeout-minutes: 20
    strategy:
      matrix:
        job_id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
      fail-fast: false

    steps:
      - name: üê≥ Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: üê≥ Pull Docker Image
        run: docker pull nduythanh1/selenium-videozz-multiprocess

      - name: ‚ñ∂Ô∏è Run 2 Docker Containers in Parallel (10 min limit)
        run: |
          # Ch·∫°y 2 container song song v·ªõi timeout 10 ph√∫t
          timeout 10m docker run --rm --name container1 -e JOB_ID=${{ matrix.job_id }} nduythanh1/selenium-videozz-multiprocess &
          timeout 10m docker run --rm --name container2 -e JOB_ID=${{ matrix.job_id }} nduythanh1/selenium-videozz-multiprocess &

          # ƒê·ª£i c·∫£ 2 container ho√†n t·∫•t
          wait
